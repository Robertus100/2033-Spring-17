import matplotlib.pyplot as plt
%matplotlib inline 
import numpy as np
from scipy.special import comb
from scipy.stats import binom 

n = 3
k = np.arange(0, n+1)
p = 1/2
# print(k)
binom_probs = binom.pmf(k, n, p)
print(binom_probs)

#################################
# Creating Plots
#
# Plots in matplotlib reside within the Figure object. You can create a new figure by saying plt.figure(). Your can store the reference to the Figure object in a variable (for example by saying fig = plt.figure() as below) and use that reference to customize the figure in a variaty of ways.
#
# But you can't make a plot with a blank figure. You have to create one or more subplots using add_subplot. The objects returned add_subplot are AxesSubplots objects on which you can directly plot.
#
# Let's start by using one subplot for now.
#


#################################
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.plot(k, binom.pmf(k, n, p), 'bo', ms=8, label='binom pmf');
ax.vlines(k, 0, binom.pmf(k, n, p), colors='b', lw=3, alpha=0.7)
ax.set_xlim([-0.5, 3.5]);
#ax.set_xticks([0, 1, 2, 3]);
ax.set_xticks(k);

#################################
print((p)**n + n*(p)**(n-1)*(1- p))
print(binom.pmf(k, n, p)[0] + binom.pmf(k, n, p)[1])
print(comb(n,0)*(p)**n + comb(n,1)*(p)**(n-1) * (1 - p))
print(binom.pmf(k, n, p))

#################################
# p = 1/2
# fig, axes = plt.subplots(1,3)
# for i in range(3):
#     if i==0:
#         n = 3
#     elif i == 1:
#         n = 10
#     else:
#         n = 100
#     k = np.arange(0, n)
#     axes[i].plot(k, binom.pmf(k, n, p), 'bo', ms=2, label='binom pmf');
#     axes[i].vlines(k, 0, binom.pmf(k, n, p), colors='b');
p = 1/2
fig = plt.figure(figsize=(10, 3))

#################################
ax1 = fig.add_subplot(1,3,1)
n, k = 3, np.arange(0, n+1)
ax1.plot(k, binom.pmf(k, n, p), 'bo', ms=5);
ax1.vlines(k, 0, binom.pmf(k, n, p), colors='b', lw=2, alpha=0.7)
ax1.set_xlim([-0.5, 3.5]);
#ax.set_xticks([0, 1, 2, 3]);
ax1.set_xticks(k);

ax2 = fig.add_subplot(1,3,2)
n = 10 
k = np.arange(0, n+1)
bin_probs = binom.pmf(k,n,p)
ax2.plot(k, bin_probs, 'bo', ms=5);
ax2.vlines(k, 0, bin_probs, colors='b', lw=2, alpha=0.7)
ax2.set_xlim([-0.5, n+1]);
ax2.set_xticks(k);

ax3 = fig.add_subplot(1,3,3)
n = 100
k = np.arange(0, n+1)
bin_probs = binom.pmf(k,n,p)
ax3.plot(k, bin_probs, 'bo', ms=5);
ax3.vlines(k, 0, bin_probs, colors='b', lw=1, alpha=0.7)
ax3.set_xlim([-0.5, n+1]);
#ax3.set_xticks(k);